--------------------------------------------------------------------------------
--------- 1 - FUNKCJA ZWRACA ILOSC KARTEK W MECZU O ID Z ARGUMENTU -------------
--------------------------------------------------------------------------------
SET SERVEROUTPUT ON
CREATE OR REPLACE FUNCTION FUN_MECZ_ILOSC_KARTEK(ID_M IN INTEGER) 
RETURN INTEGER IS

  I_ILOSC_KARTEK INTEGER := 0 ;

CURSOR CUR_MECZ_ILOSC_KARTEK IS
  
  SELECT DISTINCT
  
    COUNT (*) AS ILOSC_KARTEK INTO I_ILOSC_KARTEK
    
  FROM ZDARZENIE
  
    JOIN TYP_ZDARZENIA 
      ON ZDARZENIE.TYP_ZDARZENIA_ID_TYPU = TYP_ZDARZENIA.ID_TYPU
  
  WHERE (ZDARZENIE.TYP_ZDARZENIA_ID_TYPU = 4005 
      OR ZDARZENIE.TYP_ZDARZENIA_ID_TYPU = 4006)
     AND ZDARZENIE.MECZ_ID_MECZU = ID_M
  
  ORDER BY ILOSC_KARTEK DESC;
    
BEGIN
  OPEN CUR_MECZ_ILOSC_KARTEK;
    FETCH CUR_MECZ_ILOSC_KARTEK INTO I_ILOSC_KARTEK;   
  CLOSE CUR_MECZ_ILOSC_KARTEK;
  RETURN (I_ILOSC_KARTEK);
END;
/
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
------------ 2 - FUNKCJA ZWRACA SREDNI WIEK ZAWODNIKOW W KLUBIE ----------------
--------------------------------------------------------------------------------
SET SERVEROUTPUT ON
CREATE OR REPLACE FUNCTION FUN_AVG_WIEKU_ZAW_KLUBU (ID_K IN INTEGER) 
RETURN INTEGER IS

  TMP_WIEK INTEGER := 0.0 ;
  TMP_SUMA INTEGER := 0;
  TMP_ID_ZAW INTEGER := 0;
  TMP_LICZNIK INTEGER := 0;

CURSOR CUR_WIEK_ZAW_KLUBU IS
  
  SELECT DISTINCT
    ZAWODNIK_MECZ.ZAWODNIK_ID_OSOBY,
    TRUNC(MONTHS_BETWEEN(sysdate, OSOBA.DATA_URODZENIA)/12) AS WIEK

  FROM OSOBA

    JOIN ZAWODNIK_MECZ
      ON ZAWODNIK_MECZ.ZAWODNIK_ID_OSOBY = OSOBA.ID_OSOBY
    JOIN DRUZYNA
      ON DRUZYNA.ID_DRUZYNY = ZAWODNIK_MECZ.DRUZYNA_ID_DRUZYNY

  WHERE DRUZYNA.KLUB_ID_KLUBU = ID_K

  ORDER BY WIEK DESC;

BEGIN
  OPEN CUR_WIEK_ZAW_KLUBU;
  LOOP
    FETCH CUR_WIEK_ZAW_KLUBU INTO TMP_ID_ZAW, TMP_WIEK;
    EXIT WHEN (CUR_WIEK_ZAW_KLUBU%NOTFOUND);
    TMP_SUMA := TMP_SUMA + TMP_WIEK;
    TMP_LICZNIK := TMP_LICZNIK + 1;
  END LOOP;
  CLOSE CUR_WIEK_ZAW_KLUBU;
  RETURN (TMP_SUMA/TMP_LICZNIK);
END;
/
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
-------------- 3 - FUNKCJA ZWRACA NAZWY KLUBOW I WYNIK W MECZU -----------------
--------------------------------------------------------------------------------
SET SERVEROUTPUT ON
CREATE OR REPLACE FUNCTION FUN_WYNIK_MECZU (ID_M IN INTEGER) 
RETURN VARCHAR2 IS

  TMP_WYNIK_KLUB_1  INTEGER := 0;
  TMP_WYNIK_KLUB_2  INTEGER := 0;
  TMP_NAZWA_KLUB_1  VARCHAR(30) := '';
  TMP_NAZWA_KLUB_2  VARCHAR(30) := '';
  TMP_TMP           VARCHAR(30) := '';

--KURSOR Z NAZWAMI KLUBOW W MECZU
CURSOR CUR_KLUBY_MECZU IS SELECT DISTINCT

  KLUB.NAZWA AS NAZWA_KLUBU

FROM MECZ

  JOIN DRUZYNA 
    ON DRUZYNA.ID_DRUZYNY = MECZ.DRUZYNA_ID_DRUZYNY_1
    OR DRUZYNA.ID_DRUZYNY = MECZ.DRUZYNA_ID_DRUZYNY_2
  JOIN KLUB
    ON KLUB.ID_KLUBU = DRUZYNA.KLUB_ID_KLUBU

  WHERE MECZ.ID_MECZU = ID_M
     
ORDER BY KLUB.NAZWA DESC;
 
--KURSOR Z NAZWAMI KLUBOW I LICZBA GOLI    
CURSOR CUR_GOLE_KLUBY_MECZU IS SELECT DISTINCT
  
  KLUB.NAZWA,
  COUNT (*) AS ILOSC_GOLI

FROM ZDARZENIE

  JOIN ZAWODNIK_MECZ 
    ON ZDARZENIE.ZAWODNIK_1_ID_OSOBY = ZAWODNIK_MECZ.ZAWODNIK_ID_OSOBY
    AND ZDARZENIE.MECZ_ID_MECZU = ZAWODNIK_MECZ.MECZ_ID_MECZU
  JOIN DRUZYNA 
    ON DRUZYNA.ID_DRUZYNY = ZAWODNIK_MECZ.DRUZYNA_ID_DRUZYNY
  JOIN TYP_ZDARZENIA 
    ON ZDARZENIE.TYP_ZDARZENIA_ID_TYPU = TYP_ZDARZENIA.ID_TYPU
  JOIN KLUB
    ON KLUB.ID_KLUBU = DRUZYNA.KLUB_ID_KLUBU

  WHERE ZDARZENIE.MECZ_ID_MECZU = ID_M
    AND ZDARZENIE.TYP_ZDARZENIA_ID_TYPU = 4000
    
GROUP BY 
  KLUB.NAZWA,
  ZDARZENIE.TYP_ZDARZENIA_ID_TYPU

ORDER BY KLUB.NAZWA DESC;

BEGIN

  OPEN CUR_KLUBY_MECZU;
  FETCH CUR_KLUBY_MECZU INTO TMP_NAZWA_KLUB_1;
  FETCH CUR_KLUBY_MECZU INTO TMP_NAZWA_KLUB_2;
  CLOSE CUR_KLUBY_MECZU;

  OPEN CUR_GOLE_KLUBY_MECZU;
  
  --JESLI NIE BEDZIE GOLI TO ZOSTANIE ZERO
  FETCH CUR_GOLE_KLUBY_MECZU INTO TMP_TMP, TMP_WYNIK_KLUB_1;
  
  --JESLI NIE BEDZIE GOLI TO ZOSTANIE ZERO
  FETCH CUR_GOLE_KLUBY_MECZU INTO TMP_TMP, TMP_WYNIK_KLUB_2;
 
  CLOSE CUR_GOLE_KLUBY_MECZU;
  
  RETURN
  (
    TO_CHAR
    (
      TMP_NAZWA_KLUB_1 || ' ' || 
      TO_CHAR(TMP_WYNIK_KLUB_1) || ' : ' || 
      TO_CHAR(TMP_WYNIK_KLUB_2) || ' ' || 
      TMP_NAZWA_KLUB_2
    )
  );
END;
/
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
--- 4 - FUNKCJA ZWRACA PROCENT ZDARZENIA WZGLEDEM WSZYSTKICH ZDARZEN W MECZU ---
--------------------------------------------------------------------------------
SET SERVEROUTPUT ON
CREATE OR REPLACE 
FUNCTION FUN_PROC_ZDARZENIE_MECZ (ID_M IN INTEGER, ID_Z IN INTEGER) 
RETURN INTEGER IS

  TMP_ILOSC_WSZYSTKICH_ZDARZEN INTEGER;
  TMP_ILOSC_WSKAZANYCH_ZDARZEN INTEGER;

BEGIN

  SELECT 
    COUNT(*) INTO TMP_ILOSC_WSZYSTKICH_ZDARZEN 
  FROM ZDARZENIE 
  WHERE MECZ_ID_MECZU = ID_M;
  
  SELECT 
    COUNT(*) INTO TMP_ILOSC_WSKAZANYCH_ZDARZEN 
  FROM ZDARZENIE 
  WHERE MECZ_ID_MECZU = ID_M
    AND TYP_ZDARZENIA_ID_TYPU = ID_Z;
  
  
  RETURN((TMP_ILOSC_WSKAZANYCH_ZDARZEN/TMP_ILOSC_WSZYSTKICH_ZDARZEN)*100);
END;
/
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------